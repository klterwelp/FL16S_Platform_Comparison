---
title: "Alpha Diversity Analysis"
author: "Kat Terwelp"
format: pdf
editor: visual
---

### Set Up

```{r}
library(tidyverse) # work with tibbles etc
library(phyloseq) # work with phyloseq objects
library(microViz) # useful package for visualizations
library(vegan) # for rarecurve

# set file paths
in_path <- "../intermediates/RDS"
all_ps_path <- file.path(in_path, "all_ps.RDS")
out_path <- "../figures"

# set theme 
theme_set(theme_bw()) # slightly clearer axes for facets

# source common plot functions
source("plot_utils.r", local = knitr::knit_global())

# set colors for analysis 
platform_pal <- palette.colors(palette = "Dark2")[1:3]
```

## Rarefaction Curve

### At species level: 

```{r}
# rarecurve
set.seed(123)
# convert to species level, for species level rarecurve
all_ps_species <- all_ps_count %>% f_plot_prep_phyloseq(min_prev = 1, counts = TRUE)
tidy_rare <- rarecurve(as.data.frame(t(otu_table(all_ps_species))), step = 1000, tidy = TRUE)

tidy_rare <- tidy_rare %>%
  separate(Site, into = c("part1", "part2", "analysis"), sep = "\\.", remove = FALSE) %>%
  mutate(sampleID = paste(part1, part2, sep = ".")) %>%
  select(-part1, -part2)  # drop intermediate columns

# fix the analysis column to be a factor with levels 
tidy_rare <- tidy_rare %>% 
  mutate(analysis = case_when(analysis == "FL" ~ "FL-16S",
                              analysis == "V1V3" ~ "V1-V3",
                              .default = analysis)) %>% 
  mutate(analysis = factor(analysis, levels = c("MGX", "FL-16S", "V1-V3")))

tidy_rare <- tidy_rare %>% 
  group_by(analysis, Sample) %>% 
  mutate(med_species = median(Species), 
         num_samples = n_distinct(sampleID))

# fixing labels
analysis_labs <- c("V1-V3", "FL-16S", "Metagenomics")
names(analysis_labs) <- c("V1-V3", "FL-16S", "MGX")
```

```{r}
# filtering to only get medians where at least 1/2 of the samples remain 
options(scipen = 999) # no scientific notation
tidy_rare %>% 
  filter(num_samples > 21) %>% 
  ggplot(aes(x = Sample, y = med_species, color = analysis))+
  geom_point() +
  labs(y = "Median Species per Sample", x = "Number of Reads") + 
  theme_minimal() +
  scale_x_sqrt(labels = scales::comma, breaks = c(0, 25000, 50000, 100000, 200000)) +
  scale_colour_brewer(name = "Platform", palette = "Dark2", aesthetics = c("fill", "colour"))

f_export_plot(plot = last_plot(), out_file = "../figures/rarecurve_median_species.png")

```

### At OTU/ASV level: 

*in this case, metagenomics is still at species-level because sequences are not amplicon.*

```{r}
# rarecurve
set.seed(123)
# convert to ASV level, for ASV level rarecurve
all_ps_species <- all_ps_count %>% f_plot_prep_phyloseq(min_prev = 1, counts = TRUE, tax_select = c(1:7, 9), rank = "ASV")
tidy_rare <- rarecurve(as.data.frame(t(otu_table(all_ps_species))), step = 1000, tidy = TRUE)

tidy_rare <- tidy_rare %>%
  separate(Site, into = c("part1", "part2", "analysis"), sep = "\\.", remove = FALSE) %>%
  mutate(sampleID = paste(part1, part2, sep = ".")) %>%
  select(-part1, -part2)  # drop intermediate columns

# fix the analysis column to be a factor with levels 
tidy_rare <- tidy_rare %>% 
  mutate(analysis = case_when(analysis == "FL" ~ "FL-16S",
                              analysis == "V1V3" ~ "V1-V3",
                              .default = analysis)) %>% 
  mutate(analysis = factor(analysis, levels = c("MGX", "FL-16S", "V1-V3")))

tidy_rare <- tidy_rare %>% 
  group_by(analysis, Sample) %>% 
  mutate(med_species = median(Species), 
         num_samples = n_distinct(sampleID))
```

```{r}
# filtering to only get medians where at least 1/2 of the samples remain 
options(scipen = 999) # no scientific notation
tidy_rare %>% 
  filter(num_samples > 21) %>% 
  ggplot(aes(x = Sample, y = med_species, color = analysis))+
  geom_point() +
  labs(y = "Median ASVs per Sample", x = "Number of Reads") + 
  theme_minimal() +
  scale_x_sqrt(labels = scales::comma, breaks = c(0, 25000, 50000, 100000, 200000)) +
  scale_colour_brewer(name = "Platform", palette = "Dark2", aesthetics = c("fill", "colour"))

f_export_plot(plot = last_plot(), out_file = "../figures/rarecurve_median_asv.png")
```

### At genus level 

```{r}
# rarecurve
set.seed(123)
# convert to genus level, for genus level rarecurve
all_ps_species <- all_ps_count %>% f_plot_prep_phyloseq(min_prev = 1, counts = TRUE, tax_select = c(1:7, 9), rank = "Genus")
tidy_rare <- rarecurve(as.data.frame(t(otu_table(all_ps_species))), step = 1000, tidy = TRUE)

tidy_rare <- tidy_rare %>%
  separate(Site, into = c("part1", "part2", "analysis"), sep = "\\.", remove = FALSE) %>%
  mutate(sampleID = paste(part1, part2, sep = ".")) %>%
  select(-part1, -part2)  # drop intermediate columns

# fix the analysis column to be a factor with levels 
tidy_rare <- tidy_rare %>% 
  mutate(analysis = case_when(analysis == "FL" ~ "FL-16S",
                              analysis == "V1V3" ~ "V1-V3",
                              .default = analysis)) %>% 
  mutate(analysis = factor(analysis, levels = c("MGX", "FL-16S", "V1-V3")))

tidy_rare <- tidy_rare %>% 
  group_by(analysis, Sample) %>% 
  mutate(med_species = median(Species), 
         num_samples = n_distinct(sampleID))
```

```{r}
# filtering to only get medians where at least 1/2 of the samples remain 
options(scipen = 999) # no scientific notation
tidy_rare %>% 
  filter(num_samples > 21) %>% 
  ggplot(aes(x = Sample, y = med_species, color = analysis))+
  geom_point() +
  labs(y = "Median Genera per Sample", x = "Number of Reads") + 
  theme_minimal() +
  scale_x_sqrt(labels = scales::comma, breaks = c(0, 25000, 50000, 100000, 200000)) +
  scale_colour_brewer(name = "Platform", palette = "Dark2", aesthetics = c("fill", "colour"))

f_export_plot(plot = last_plot(), out_file = "../figures/rarecurve_median_genus.png")
```

## Richness 

Similar plot to the rarecurves, but instead of median per sample, get the total number of unique taxa detected

```{r}
# function 
f_rarecurve_total_counts <- function(ps, 
                                     by = 1000,
                                     min = 1, 
                                     max = "default", 
                                     replace = FALSE, 
                                     seed = 123) {
  if (max == "default") {
    # get max number of sequences 
    max_reads <- max(ps@sam_data$total_reads)
  } else {
    max_reads = max
  }
  # sampling depths
  sampling_depths <- seq(min, max_reads, by)
  
  # function to get length of taxa
  uniq_num_taxa <- function(ps, rank) {
    num_taxa <- length(get_taxa_unique(ps, rank))
  }
  
  # initiate table and iteration
  table_list <- list() 
  i = 0
  for (sampling_depth in sampling_depths) {
    # add one to iteration
    i = i + 1
    # initiate table for rep
    print(paste0("Processing sampling depth:", sampling_depth))
    rare_ps <- rarefy_even_depth(ps, 
                          sample.size = sampling_depth, 
                          rngseed = seed,
                          verbose = FALSE, 
                          replace = replace)
    # determine analyses that are left
    analyses <- rare_ps@sam_data$analysis %>% unique() %>% as.character()
    # intiate table to store values for this rep
    table_i <- expand.grid(sampling_depth = sampling_depth, 
                           ranks = rank_names(ps), 
                           analysis = analyses)
    # filter ps by analysis
    filt_ps <- sapply(analyses, function(value) {ps_filter(rare_ps, analysis == value)})
    # fill otu rarefied table
    # calculate number of taxa for each rank and analysis 
    table_i$num_taxa <- mapply(function(a, r) uniq_num_taxa(filt_ps[[a]], r),
                                table_i$analysis, table_i$ranks)
    # calculate the number of samples for each analysis
    table_i$num_samples <- sapply(table_i$analysis, function(a) nsamples(filt_ps[[a]]))
    # add the number of samples 
    table_list[[i]] <- table_i
  }
  # combine all tables together
  table <- bind_rows(table_list)
  table <- table %>%
      mutate(ranks = factor(ranks, 
                            levels = c("Kingdom", "Phylum", "Class", 
                                       "Order", "Family", "Genus", 
                                       "Species"), ordered = TRUE))
  return(table)
}

```

```{r}
all_ps_count_fix <- all_ps_count
all_ps_count_fix@tax_table <- all_ps_count_fix@tax_table[,1:7]
rarecurve_total <- f_rarecurve_total_counts(all_ps_count_fix, min = 1, max = 200001, by = 1000)

saveRDS(object = rarecurve_total, file = "../intermediates/RDS/rarecurve_total.RDS")
```

```{r}
# for all three 
rarecurve_total %>% 
dplyr::filter(num_samples > 21) %>% 
  dplyr::filter(ranks != "Kingdom") %>% 
  ggplot(aes(x = sampling_depth, y = num_taxa, colour = analysis)) +
  geom_point() +
  facet_wrap(~ranks, scales = "free_y") + 
  scale_x_sqrt(labels = scales::label_number(scale_cut = cut_long_scale()), 
               breaks = c(0, 25000, 50000, 100000, 200000)) +
  scale_colour_brewer(name = "Platform", palette = "Dark2", aesthetics = c("fill", "colour")) +
  labs(y = "Total Unique Taxa", x = "Number of Reads") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
        panel.grid.minor = element_blank()) 

f_export_plot(plot = last_plot(), out_file = "../figures/rarecurve_total-taxa.png")

# repeat with no MGX 
rarecurve_total %>% 
dplyr::filter(num_samples > 21) %>% 
  dplyr::filter(ranks != "Kingdom") %>% 
  dplyr::filter(analysis != "MGX") %>% 
  ggplot(aes(x = sampling_depth, y = num_taxa, colour = analysis)) +
  geom_point() +
  facet_wrap(~ranks, scales = "free_y") + 
  scale_x_sqrt(labels = scales::label_number(scale_cut = cut_long_scale()), 
               breaks = c(0, 25000, 50000, 100000, 200000)) +
  scale_colour_brewer(name = "Platform", palette = "Dark2", aesthetics = c("fill", "colour")) +
  labs(y = "Total Unique Taxa", x = "Number of Reads") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
        panel.grid.minor = element_blank()) 

f_export_plot(plot = last_plot(), out_file = "../figures/rarecurve_total-taxa_amplicon.png")

```

## Alpha Diversity Metrics

```{r}
#  "average # of rank" and average alpha div metrics rarefying to min # of reads in ps_all_count

# inputs: 
# ps = phyloseq object to rarefy
# rep = number of times to rarefy, rep iteration will be the seed 
# sample_size = rarefaction depth
# replace = No (theoretically better to sample w/o replacement ~ cameron et al 2021 )
# trimOTUs = TRUE 
# rarefy-even-depth(sample.size, rngseed, replace = FALSE, trimOTUs = TRUE)

# set up phyloseq object
all_ps_count_fix <- all_ps_count
all_ps_count_fix@tax_table <- all_ps_count_fix@tax_table[,1:7]

iter_rarefaction_uniq_rank <- function(ps, sample_size=min(sample_sums(ps)), 
                                       reps = 100, replace = FALSE) {
  # function to get length of taxa
  uniq_num_taxa <- function(ps, rank) {
    num_taxa <- length(get_taxa_unique(ps, rank))
  }
  # initiate table 
  table <- tibble() 
  for (i in seq(reps)) {
    print(paste0("Processing ", i, "/", reps, "..."))
    # initiate table for rep
    table_i <- expand.grid(rep = i, 
                           ranks = rank_names(ps), 
                           analysis = c("MGX", "FL-16S", "V1-V3"))
    # rarefy ps 
    rare_ps <- rarefy_even_depth(ps, 
                          sample.size = sample_size, 
                          rngseed = i, # seed is rep # 
                          verbose = FALSE, 
                          replace = replace)
    # filter ps by analysis
    rare_ps_mgx <- ps_filter(rare_ps, analysis == "MGX")
    rare_ps_v1v3 <- ps_filter(rare_ps, analysis == "V1-V3")
    rare_ps_fl <- ps_filter(rare_ps, analysis == "FL-16S")
    # fill otu rarefied table
    table_i <- table_i %>% 
      rowwise() %>% 
      mutate(num_taxa = case_when(
        analysis == "MGX" ~ uniq_num_taxa(rare_ps_mgx, ranks),
        analysis == "V1-V3" ~ uniq_num_taxa(rare_ps_v1v3, ranks),
        analysis == "FL-16S" ~ uniq_num_taxa(rare_ps_fl, ranks))) %>%
      mutate(ranks = factor(ranks, 
                            levels = c("Kingdom", "Phylum", "Class", 
                                       "Order", "Family", "Genus", 
                                       "Species"), ordered = TRUE))
    table <- bind_rows(table, table_i)
  }
  return(table)
}

rare_rank <- iter_rarefaction_uniq_rank(all_ps_count_fix)
rare_rank_10k <- iter_rarefaction_uniq_rank(all_ps_count_fix,
                                        sample_size = 10000)
rare_rank_30k <- iter_rarefaction_uniq_rank(all_ps_count_fix,
                                        sample_size = 30000)
```
